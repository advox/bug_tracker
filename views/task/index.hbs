<h2>Task list</h2>
<div>
    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation" class="active"><a href="#active-tasks" aria-controls="active-tasks" role="tab" data-toggle="tab">Active tasks</a></li>
        <li role="presentation"><a href="#done-tasks" aria-controls="done-tasks" role="tab" data-toggle="tab">Done tasks</a></li>
    </ul>
    
    <div class="tab-content">
        <div role="tabpanel" class="tab-pane active" id="active-tasks">
            <h3>Active tasks</h3>
            <button onclick="window.document.location='/task/new'" class="btn btn-lg btn-primary">Add new</button>
            {{>taskGrid tasks=todo id='todoTasks'}}
        </div>
        <div role="tabpanel" class="tab-pane" id="done-tasks">
            <h3>Done tasks</h3>
            {{>taskGrid tasks=done id='doneTasks'}}
        </div>
    </div>
</div>

<script>
    var taskStatuses = '{{{taskStatuses}}}';
    var taskImportance = '{{{taskImportance}}}';
            
    function showStatusSelect(item) {
        $(item).hide();
        $(item).parent().children('#statusSelect').show();
    }
    
    function updateStatus(item, id) {
        var value = $(item).parent().parent().children('#statusSelect').find('select').val();
        var labelItem = $(item).parent().parent().children('#statusLabel');
        
        $.ajax({
            url: 'task/saveAjax',
            method: 'POST',
            data: {
                _id : id,
                status: value
            },
            success: function(data) {
                if(data.status === 'success') {
                    for(var i = 0; i < taskStatuses.length; i++) {
                        if(taskStatuses[i].id == value) {
                            labelItem.html(taskStatuses[i].name);
                            break;
                        }
                    }
                    
                    showStatusLabel(item);
                }
            }
        });
    }
            
    function showStatusLabel(item) {
        $(item).parent().parent().children('#statusSelect').hide();
        $(item).parent().parent().children('#statusLabel').show();
    }
            
    function renderStatusColumn(data, id) {
        var template = '<div class="input-group" id="statusSelect" style="display: none;"><select name="newStatus" class="form-control">';
        var name = '';
        
        for(var i = 0; i < taskStatuses.length; i++) {
            if(taskStatuses[i].id == data) {
                name = taskStatuses[i].name;
                template += '<option value="' + taskStatuses[i].id + '" selected="selected">' + taskStatuses[i].name + '</option>';
            } else {
                template += '<option value="' + taskStatuses[i].id + '">' +taskStatuses[i].name + '</option>';
            }
        }
        
        template += '</select><span class="input-group-addon" onclick="updateStatus(this, \'' + id + '\');"><i class="glyphicon glyphicon-ok"></i></span></div>';
        
        template += '<div id="statusLabel" onclick="showStatusSelect(this);">' + name + '</div>';
        
        return template;
    }
    
    function renderImportantColumn(data) {
        for(var i = 0; i < taskImportance.length; i++) {
            if(taskImportance[i].id == data) {
                return taskImportance[i].name;
            }
        }
        
        return data;
    }
    
    function renderSEBColumn(importance) {
        if(importance == 3) {
            return '<img src="images/superman.color.webp">'
        }
        
        return '<img src="images/superman.mono.webp">';
    }
    
    $.when(
        $.ajax({
            url: 'task/statuses',
            type: 'GET',
            success : function(data) {
                taskStatuses = data.statuses;
            }
        }),
        $.ajax({
            url: 'task/importance',
            type: 'GET',
            success : function(data) {
                taskImportance = data.importance;
            }
        }),
    )
    .done(function() {
        $('#todoTasks').DataTable({
            processing: true,
            serverSide: true,
            dom: '<"top"iflp<"clear">>rt<"bottom"iflp<"clear">>',
            sPaginationType: "full_numbers",
            lengthMenu: [[10, 30, 50, 100], [10, 30, 50, 100]],
           // order: [[10, "desc"]],
            pageLength: 30,
            ajax: {
                url: "/task/grid",
                type: "POST",
                data: function (d) {
                    d.status = "1,3";
                },
            },
            columns : [
                {
                    data: "title",
                    render: function ( data, type, full, meta ) {
                        return '<a href="/task/edit/' + full._id + '">' + data + '</a>';
                    }
                },
                {
                    data: "status",
                    render: function (data, type, full, meta ) {
                        return renderStatusColumn(data, full._id);
                    }
                },
                { data: "rank" },
                {
                    data: "important",
                    render: function ( data, type, full, meta ) {
                        return renderImportantColumn(data);
                    }
                    
                },
                {
                    data: "important",
                    render: function ( data, type, full, meta ) {
                        return renderSEBColumn(data);
                    }
                },
                {
                    data: "content",
                    render: function ( data, type, full, meta ) {
                        return data.substring(0,40) + "...";
                    }
                },
                {
                    data: "author",
                    render: function ( data, type, row ) {
                        if(row.author !== null) {
                            return data + ' ' + row.author.surname;
                        }
                        
                        return '-';
                    }
                },
                {
                    data: "comments",
                    render:  function ( data, type, row ) {
                        return data.length;
                    }
                },
                {
                    data: "createdAt",
                    render: function ( data, type, full, meta ) {
                        return data.replace('T', ' ').substring(0, 19);
                    }
                },
                {
                    data: "updatedAt",
                    render: function (data, type, full, meta) {
                        return data.replace('T', ' ').substring(0, 19);
                    }
                },
            ]
        });

        $('#doneTasks').DataTable({
            processing: true,
            serverSide: true,
            dom: '<"top"iflp<"clear">>rt<"bottom"iflp<"clear">>',
            sPaginationType: "full_numbers",
            lengthMenu: [[10, 30, 50, 100], [10, 30, 50, 100]],
         //   order: [[10, "desc"]],
            pageLength: 30,
            ajax: {
                url: "/task/grid",
                type: "POST",
                data: function (d) {
                    d.status = "2";
                },
            },
            columns : [
                {
                    data: "title",
                    render: function ( data, type, full, meta ) {
                        return '<a href="/task/edit/' + full._id + '">' + data + '</a>';
                    }
                },
                {
                    data: "status",
                    render: function (data, type, full, meta ) {
                        return renderStatusColumn(data, full._id);
                    }
                },
                { data: "rank"},
                { data: "important"},
                {
                    data: "important",
                    render: function ( data, type, full, meta ) {
                        return '<img src="images/superman.mono.webp">';
                    }
                },
                {
                    data: "content",
                    render: function ( data, type, full, meta ) {
                        return data.substring(0,40) + "...";
                    }
                },
                {
                    data: "author",
                    render: function ( data, type, row ) {
                        if(row.author !== null) {
                            return data + ' ' + row.author.surname;
                        }
                        
                        return '';
                    }
                },
                {
                    data: "comments",
                    render:  function ( data, type, row ) {
                        return data.length;
                    }
                },
                {
                    data: "createdAt",
                    render: function ( data, type, full, meta ) {
                        return data.replace('T', ' ').substring(0, 19);
                    }
                },
                {
                    data: "updatedAt",
                    render: function (data, type, full, meta) {
                        return data.replace('T', ' ').substring(0, 19);
                    }
                },
            ]
        });
    });
</script>
